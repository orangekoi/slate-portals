"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var colors_exports = {};
__export(colors_exports, {
  bgBlack: () => bgBlack,
  bgBlackBright: () => bgBlackBright,
  bgBlue: () => bgBlue,
  bgBlueBright: () => bgBlueBright,
  bgCyan: () => bgCyan,
  bgCyanBright: () => bgCyanBright,
  bgGreen: () => bgGreen,
  bgGreenBright: () => bgGreenBright,
  bgMagenta: () => bgMagenta,
  bgMagentaBright: () => bgMagentaBright,
  bgRed: () => bgRed,
  bgRedBright: () => bgRedBright,
  bgWhite: () => bgWhite,
  bgWhiteBright: () => bgWhiteBright,
  bgYellow: () => bgYellow,
  bgYellowBright: () => bgYellowBright,
  black: () => black,
  blackBright: () => blackBright,
  blue: () => blue,
  blueBright: () => blueBright,
  bold: () => bold,
  color: () => color,
  colorProcess: () => colorProcess,
  cyan: () => cyan,
  cyanBright: () => cyanBright,
  dim: () => dim,
  gray: () => gray,
  green: () => green,
  greenBright: () => greenBright,
  hidden: () => hidden,
  inverse: () => inverse,
  italic: () => italic,
  magenta: () => magenta,
  magentaBright: () => magentaBright,
  red: () => red,
  redBright: () => redBright,
  reset: () => reset,
  strikethrough: () => strikethrough,
  underline: () => underline,
  white: () => white,
  whiteBright: () => whiteBright,
  yellow: () => yellow,
  yellowBright: () => yellowBright
});
module.exports = __toCommonJS(colors_exports);
var import_esm_env = require("esm-env");
var stylesBrowser = __toESM(require("./stylesBrowser.js"), 1);
var stylesNode = __toESM(require("./stylesNode.js"), 1);
const getStyleBrowser = (styleKey) => {
  return stylesBrowser[styleKey] ?? void 0;
};
const getStyleNode = (styleKey) => {
  return stylesNode[styleKey] ?? void 0;
};
const color = (style, str) => {
  return import_esm_env.BROWSER ? colorBrowser(style, str) : colorNode(style, str);
};
const colorNode = (style, str) => {
  return `${getStyleNode(style)[0]}${str}${getStyleNode(style)[1]}`;
};
const START1 = `$$KitQL_`;
const START2 = `_KitQL$$`;
const END = `$$KitQLEND$$`;
const colorBrowser = (style, str) => {
  return `${START1}${style}${START2}${str}${END}`;
};
function extractKitQLTags(str) {
  const regex = /\$\$KitQL_(.*?)_KitQL\$\$/g;
  let match;
  const results = [];
  while ((match = regex.exec(str)) !== null) {
    results.push(match[1]);
  }
  return results;
}
const getAllIndexOf = (str, subStr) => {
  let lastIndex = 0;
  const indexes = [];
  while (lastIndex !== -1) {
    lastIndex = str.indexOf(subStr, lastIndex);
    if (lastIndex !== -1) {
      indexes.push(lastIndex);
      lastIndex += subStr.length;
    }
  }
  return indexes;
};
const colorProcess = (...msgs) => {
  if (!import_esm_env.BROWSER) {
    return [...msgs];
  }
  const arr = [...msgs];
  const msgsTransformed = [];
  const colors = [];
  const additional = [];
  for (let i = 0; i < arr.length; i++) {
    let msg = arr[i];
    if (typeof msg !== "string") {
      additional.push(msg);
    } else {
      const originalStr = msg;
      const posToReplace = [];
      const tagsUsed = [...new Set(extractKitQLTags(originalStr))];
      for (const key of tagsUsed) {
        const indexesStarts = getAllIndexOf(originalStr, `${START1}${key}${START2}`);
        for (const index of indexesStarts) {
          posToReplace.push({ index, browser: getStyleBrowser(key) });
        }
        msg = msg.replaceAll(`${START1}${key}${START2}`, "%c");
      }
      const indexesEnd = getAllIndexOf(originalStr, END);
      for (const index of indexesEnd) {
        posToReplace.push({ index, browser: "" });
      }
      msg = msg.replaceAll(END, "%c");
      for (const c of posToReplace.sort((a, b) => a.index - b.index)) {
        colors.push(c.browser);
      }
      msgsTransformed.push(msg);
    }
  }
  return [msgsTransformed.join(" "), ...colors, ...additional];
};
const reset = (str) => {
  return color("reset", str);
};
const bold = (str) => {
  return color("bold", str);
};
const dim = (str) => {
  return color("dim", str);
};
const italic = (str) => {
  return color("italic", str);
};
const underline = (str) => {
  return color("underline", str);
};
const inverse = (str) => {
  return color("inverse", str);
};
const hidden = (str) => {
  return color("hidden", str);
};
const strikethrough = (str) => {
  return color("strikethrough", str);
};
const black = (str) => {
  return color("black", str);
};
const red = (str) => {
  return color("red", str);
};
const green = (str) => {
  return color("green", str);
};
const yellow = (str) => {
  return color("yellow", str);
};
const blue = (str) => {
  return color("blue", str);
};
const magenta = (str) => {
  return color("magenta", str);
};
const cyan = (str) => {
  return color("cyan", str);
};
const white = (str) => {
  return color("white", str);
};
const gray = (str) => {
  return color("gray", str);
};
const bgBlack = (str) => {
  return color("bgBlack", str);
};
const bgRed = (str) => {
  return color("bgRed", str);
};
const bgGreen = (str) => {
  return color("bgGreen", str);
};
const bgYellow = (str) => {
  return color("bgYellow", str);
};
const bgBlue = (str) => {
  return color("bgBlue", str);
};
const bgMagenta = (str) => {
  return color("bgMagenta", str);
};
const bgCyan = (str) => {
  return color("bgCyan", str);
};
const bgWhite = (str) => {
  return color("bgWhite", str);
};
const blackBright = (str) => {
  return color("blackBright", str);
};
const redBright = (str) => {
  return color("redBright", str);
};
const greenBright = (str) => {
  return color("greenBright", str);
};
const yellowBright = (str) => {
  return color("yellowBright", str);
};
const blueBright = (str) => {
  return color("blueBright", str);
};
const magentaBright = (str) => {
  return color("magentaBright", str);
};
const cyanBright = (str) => {
  return color("cyanBright", str);
};
const whiteBright = (str) => {
  return color("whiteBright", str);
};
const bgBlackBright = (str) => {
  return color("bgBlackBright", str);
};
const bgRedBright = (str) => {
  return color("bgRedBright", str);
};
const bgGreenBright = (str) => {
  return color("bgGreenBright", str);
};
const bgYellowBright = (str) => {
  return color("bgYellowBright", str);
};
const bgBlueBright = (str) => {
  return color("bgBlueBright", str);
};
const bgMagentaBright = (str) => {
  return color("bgMagentaBright", str);
};
const bgCyanBright = (str) => {
  return color("bgCyanBright", str);
};
const bgWhiteBright = (str) => {
  return color("bgWhiteBright", str);
};
