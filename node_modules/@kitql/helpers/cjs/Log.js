"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Log_exports = {};
__export(Log_exports, {
  Log: () => Log
});
module.exports = __toCommonJS(Log_exports);
var import_colors = require("./colors/index.js");
class Log {
  toolName;
  levelsToShow;
  withDate;
  prefixEmoji;
  constructor(toolName, options) {
    this.toolName = toolName;
    this.levelsToShow = options?.levelsToShow ?? 3;
    this.withDate = options?.withDate ?? null;
    this.prefixEmoji = options?.prefixEmoji ?? "";
  }
  buildStr(withError, withSuccess, level, ...msgs) {
    const table = [];
    if (this.toolName) {
      const strTool = ` ${this.toolName} `;
      if (withError) {
        table.push((0, import_colors.bgRedBright)(strTool));
      } else if (withSuccess) {
        table.push((0, import_colors.bgGreen)(strTool));
      } else {
        table.push((0, import_colors.bgBlueBright)(strTool));
      }
    }
    if (this.withDate === "dateTime") {
      table.push(String((0, import_colors.bgBlueBright)(`${(/* @__PURE__ */ new Date()).toISOString()} `)));
    } else if (this.withDate === "time") {
      table.push(String((0, import_colors.bgBlueBright)(`${(/* @__PURE__ */ new Date()).toISOString().split("T")[1]} `)));
    }
    if (withError) {
      table.push((0, import_colors.bold)((0, import_colors.redBright)(" \u2718")));
    } else if (withSuccess) {
      table.push((0, import_colors.bold)((0, import_colors.greenBright)(" \u2714")));
    } else {
      table.push(String("" + this.prefixEmoji));
    }
    if (level > 0) {
      const indent = " ".repeat(level);
      table.push(indent);
    }
    if (table.length === 0 || table.length === 1 && table[0] === "") {
      return (0, import_colors.colorProcess)(...[...msgs.flatMap((c) => c)]);
    }
    return (0, import_colors.colorProcess)(...[table.join(""), ...msgs.flatMap((c) => c)]);
  }
  /**
   * console.info with options
   * @param conf with level of indentation
   */
  infoO(conf, ...msgs) {
    const built = this.buildStr(false, false, conf.level, ...msgs);
    console.info(...built.flatMap((c) => c));
    return built;
  }
  /**
   * console.info
   */
  info(...msgs) {
    const built = this.buildStr(false, false, 0, ...msgs);
    console.info(...built.flatMap((c) => c));
    return built;
  }
  /**
   * console.info with options and success icon
   * @param conf with level of indentation
   */
  successO(conf, ...msgs) {
    const built = this.buildStr(false, true, conf.level, msgs);
    console.info(...built.flatMap((c) => c));
    return built;
  }
  /**
   * console.info with success icon
   */
  success(...msgs) {
    const built = this.buildStr(false, true, 0, msgs);
    console.info(...built.flatMap((c) => c));
    return built;
  }
  /**
   * console.error with error icon
   */
  error(...msgs) {
    const built = this.buildStr(true, false, 0, msgs);
    console.error(...built.flatMap((c) => c));
    return built;
  }
}
